<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[node+express+mongodb登录实例]]></title>
      <url>http://diyxiaoshitou.github.io/2016/12/07/node-express-mongodb%E7%99%BB%E5%BD%95%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>刚了解nodejs,发现nodejs配置起来不复杂,但也有很多需要注意的地方,今天就记录一下,以后也可拿出来看看.<br>要完成这个简单的示例,从零开始,走三步就行了.</p>
<h2 id="一-搭建开发环境"><a href="#一-搭建开发环境" class="headerlink" title="一.搭建开发环境"></a>一.搭建开发环境</h2><h4 id="1-nodejs"><a href="#1-nodejs" class="headerlink" title="1. nodejs"></a>1. nodejs</h4><p>到官方网站下载最新版本 <a href="http://www.nodejs.org/" target="_blank" rel="external">http://www.nodejs.org/</a>, 下载之后,安装,一路 next<br>2 配置 path 把上面安装的目录配置到环境变量中,方便以后用命令行的方式使用node.exe.<br>比如我的 node.exe 在 “H:\Program Files\nodejs\node.exe”, 在环境变量最开始加上 “H:\Program Files\nodejs\;”</p>
<h4 id="2-mongodb"><a href="#2-mongodb" class="headerlink" title="2. mongodb"></a>2. mongodb</h4><p>1 安装　<a href="http://www.mongodb.org/downloads" target="_blank" rel="external">http://www.mongodb.org/downloads</a> 下载, 建议下载 zip 版,开发的时候,不需要安装,直接解压就可以用了.</p>
<ol>
<li>使用命令行方式启动 mongodb<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\&gt;mongod 127.0.0.1:27017 --dbpath  D:\mongodb\dbone　　　　//D:\mongodb\dbone mongodb和dbone文件夹要自己先建立好, 另外, --dbpath 参数值中间不能有空格</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="二-创建项目-express"><a href="#二-创建项目-express" class="headerlink" title="二.创建项目(express)"></a>二.创建项目(express)</h2><p>  1 .安装全局插件</p>
<p>　　　　>nmp install -g express　　　　　　　　　　//自动下载 express 插件</p>
<p>　　　　>nmp install -g express-generator　　　　//express 在命令行中的工具</p>
<p>　2. 添加项目</p>
<p>　　　　>express -e webapp</p>
<p>　　　　>cd webapp 　　</p>
<p>　　　　>npm install　　//让npm根据 package.json 自动下载依赖包</p>
<p>　　　　>npm install mongo &amp;&amp; npm install express-mongo　　//下载 mongodb 支持包</p>
<p>上面我们已经生成好了app原型，接着我们设计数据库<br>cmd命令行里：<br>mongo //进入数据库<br>use hello-world //创建项目数据库<br>db.addUser(“shuaige”, “123456”) //给这个数据库创建了一个叫帅哥的账号，密码123456 （但是我觉得可能我理解的不到位，你也可以不做这个操作）<br>然后，我们就为这个hello-world数据库创建collection（collection就相当于oracle和mysql里的table）<br>db.createCollection(“users”) //创建一个集合，也就是表<br>db.users.insert({userid: “admin”, password: “123456”}) //给users里添加一个文档，也就是一条记录账号admin，密码123456<br>ok，现在检查一下：<br>db.users.find() //如果看到你刚刚添加的文档记录，就ok咯</p>
<h2 id="三-编码"><a href="#三-编码" class="headerlink" title="三.编码"></a>三.编码</h2><h4 id="1-修改模版规则"><a href="#1-修改模版规则" class="headerlink" title="1.修改模版规则"></a>1.修改模版规则</h4><p>　　　　app.js 中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</div></pre></td></tr></table></figure></p>
<p>　　　　修改成:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.engine(&apos;html&apos;, require(&apos;ejs&apos;).__express);</div><div class="line">app.set(&apos;view engine&apos;, &apos;html&apos;);</div></pre></td></tr></table></figure></p>
<p>　　把 /views/ 中的文件后缀改成 *.html</p>
<h4 id="2-添加页面-又称视图"><a href="#2-添加页面-又称视图" class="headerlink" title="2.添加页面(又称视图)"></a>2.添加页面(又称视图)</h4><p>　　　　index.html 点击”登录” 跳转到 login.html, 登录功之后,跳转到 home.html, 在 home.html 点击注销之后跳转到 login.html</p>
<p>　　　　/views/login.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'/stylesheets/style.css'</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userid"</span> <span class="attr">id</span>=<span class="string">"userid"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        密  码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p> /views/home.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'/stylesheets/style.css'</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎光临: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">userid</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/logout"</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改 /views/index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'/stylesheets/style.css'</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome to <span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="3-添加-model"><a href="#3-添加-model" class="headerlink" title="3.添加 model"></a>3.添加 model</h4><p>添加 /routes/models.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongo = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</div><div class="line"><span class="keyword">var</span> Schema = mongo.Schema;</div><div class="line"><span class="keyword">var</span> UserSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">userid</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">name</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">password</span>: <span class="built_in">String</span></div><div class="line">&#125;);</div><div class="line">exports.User = mongo.model(<span class="string">'User'</span>, UserSchema);</div></pre></td></tr></table></figure></p>
<h4 id="4-修改路由"><a href="#4-修改路由" class="headerlink" title="4.修改路由"></a>4.修改路由</h4><p>修改 /routes/index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"><span class="keyword">var</span> mongo = <span class="built_in">require</span>(<span class="string">'mongoose'</span>); <span class="comment">//</span></div><div class="line"><span class="keyword">var</span> models = <span class="built_in">require</span>(<span class="string">'./models'</span>); <span class="comment">//引入 model</span></div><div class="line"><span class="keyword">var</span> User = models.User;</div><div class="line"></div><div class="line">mongo.connect(<span class="string">'mongodb://192.168.199.9:8888/logindb'</span>); <span class="comment">//连接数据库</span></div><div class="line"></div><div class="line"><span class="comment">/* GET home page. */</span></div><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">router.get(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123; <span class="comment">//转到登录页面</span></div><div class="line">  res.render(<span class="string">'login'</span>, &#123; <span class="attr">title</span>: <span class="string">'登录'</span> &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">router.post(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123; <span class="comment">//处理登录请求</span></div><div class="line">    <span class="keyword">var</span> query_doc = &#123; <span class="attr">userid</span>: req.body.userid, <span class="attr">password</span>: req.body.password &#125;;</div><div class="line">    User.count(query_doc, <span class="function"><span class="keyword">function</span>(<span class="params">err, doc</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(doc == <span class="number">1</span>)&#123;<span class="comment">//验证成功,转到 欢迎页面</span></div><div class="line">            res.redirect(<span class="string">'/home?userid='</span> + query_doc.userid);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            res.redirect(<span class="string">'/login'</span>);</div><div class="line">        &#125;        </div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.get(<span class="string">'/logout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;<span class="comment">//注销,转到登录页面</span></div><div class="line">  res.redirect(<span class="string">'/login'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.get(<span class="string">'/home'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;<span class="comment">//欢迎页面</span></div><div class="line">    <span class="keyword">var</span> userid = req.query.userid;</div><div class="line">    res.render(<span class="string">'welcome'</span>, &#123; <span class="attr">title</span>: <span class="string">''</span>, <span class="attr">userid</span>: userid&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure></p>
<h4 id="5-运行"><a href="#5-运行" class="headerlink" title="5.运行"></a>5.运行</h4><p>　　　　5.1.启动 app.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　　　&gt;node ./bin/www</div></pre></td></tr></table></figure></p>
<p>　　　　5.2 用浏览器访问 <a href="http://localhost:3000/" target="_blank" rel="external">http://localhost:3000/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery对象和DOM对象之间的转换实现]]></title>
      <url>http://diyxiaoshitou.github.io/2016/11/23/jQuery%E5%AF%B9%E8%B1%A1%E5%92%8CDOM%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>本文主要向大家介绍了jQuery对象和DOM对象之间互相转换的方法，其实转换过程十分简单，一起来看看吧。<br>在讨论jQuery对象和DOM对象的相互交换之前，先约定好定义变量的风格。如果获取的对象是jQuery对象，那么在变量前加上$，例如：<br>var $variable = jQuery对象;<br>如果获取的是DOM对象，则定义如下：<br>var variable = DOM对象；</p>
<h3 id="1-jQuery对象转成DOM对象"><a href="#1-jQuery对象转成DOM对象" class="headerlink" title="1.jQuery对象转成DOM对象"></a>1.jQuery对象转成DOM对象</h3><p>jQuery对象不能使用DOM中的方法，但是如果对jQuery对象所提供的方法不熟悉，或者jQuery没有封装想要的方法，不得不实用DOM对象的时候，有以下两种处理方法。jQuery提供了两种方法将一个jQuery对象转换成DOM对象，即[index]和get(index).</p>
<h4 id="1-jQuery对象是一个数组对象，可以通过-index-的方法得到相应的DOM对象。"><a href="#1-jQuery对象是一个数组对象，可以通过-index-的方法得到相应的DOM对象。" class="headerlink" title="(1)jQuery对象是一个数组对象，可以通过[index]的方法得到相应的DOM对象。"></a>(1)jQuery对象是一个数组对象，可以通过[index]的方法得到相应的DOM对象。</h4><p>jQuery代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $cr = $(<span class="string">"#cr"</span>); <span class="comment">//jQuery对象var cr = $cr[0] //DOM对象</span></div><div class="line">alert(cr.checked) <span class="comment">//检测这个checkbox是否选中了</span></div></pre></td></tr></table></figure></p>
<h4 id="2-另一种方法是jQuery本身提供的，通过get-index-方法得到相应的DOM对象。"><a href="#2-另一种方法是jQuery本身提供的，通过get-index-方法得到相应的DOM对象。" class="headerlink" title="(2)另一种方法是jQuery本身提供的，通过get(index)方法得到相应的DOM对象。"></a>(2)另一种方法是jQuery本身提供的，通过get(index)方法得到相应的DOM对象。</h4><p>jQuery代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $cr = $(<span class="string">"#cr"</span>);<span class="keyword">var</span> cr = $cr.get(<span class="number">0</span>);alert(cr.checked)</div></pre></td></tr></table></figure></p>
<h3 id="2-DOM对象转换成jQuery对象"><a href="#2-DOM对象转换成jQuery对象" class="headerlink" title="2.DOM对象转换成jQuery对象"></a>2.DOM对象转换成jQuery对象</h3><p>对于一个DOM对象，只需要用$()把DOM对象包装起来，就可以获得一个jQuery对象了，方式为$(DOM对象)。<br>jQuery代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cr = <span class="built_in">document</span>.getElementByID(<span class="string">"cr"</span>); <span class="comment">//DOM对象var $cr = $(cr);</span></div></pre></td></tr></table></figure></p>
<p>转换后，可以任意使用jQuery中的方法。<br>通过以上方法，可以任意地相互转换jQuery对象和DOM对象。<br>最后强调，DOM对象才能使用DOM中的方法，jQuery对象不可以使用DOM中的方法，但jQuery对象提供了一套更加完善的工具用于操作DOM。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[跨域]]></title>
      <url>http://diyxiaoshitou.github.io/2016/11/23/%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><p>JavaScript出于安全方面的考虑，不允许跨域调用其他页面的对象。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。这里把涉及到跨域的一些问题简单地整理一下：</p>
<p>首先什么是跨域，简单地理解就是因为JavaScript同源策略的限制，a.com 域名下的js无法操作b.com或是c.a.com域名下的对象。更详细的说明可以看下表：</p>
<p>URL    说明    是否允许通信<br><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a><br><a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a>    同一域名下    允许<br><a href="http://www.a.com/lab/a.js" target="_blank" rel="external">http://www.a.com/lab/a.js</a><br><a href="http://www.a.com/script/b.js" target="_blank" rel="external">http://www.a.com/script/b.js</a>    同一域名下不同文件夹    允许<br><a href="http://www.a.com:8000/a.js" target="_blank" rel="external">http://www.a.com:8000/a.js</a><br><a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a>    同一域名，不同端口    不允许<br><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a><br><a href="https://www.a.com/b.js" target="_blank" rel="external">https://www.a.com/b.js</a>    同一域名，不同协议    不允许<br><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a><br><a href="http://70.32.92.74/b.js" target="_blank" rel="external">http://70.32.92.74/b.js</a>    域名和域名对应ip    不允许<br><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a><br><a href="http://script.a.com/b.js" target="_blank" rel="external">http://script.a.com/b.js</a>    主域相同，子域不同    不允许<br><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a><br><a href="http://a.com/b.js" target="_blank" rel="external">http://a.com/b.js</a>    同一域名，不同二级域名（同上）    不允许（cookie这种情况下也不允许访问）<br><a href="http://www.cnblogs.com/a.js" target="_blank" rel="external">http://www.cnblogs.com/a.js</a><br><a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a>    不同域名    不允许<br>特别注意两点：<br>第一，如果是协议和端口造成的跨域问题“前台”是无能为力的，<br>第二：在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。<br>“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”。<br>接下来简单地总结一下在“前台”一般处理跨域的办法，后台proxy这种方案牵涉到后台配置，这里就不阐述了，有兴趣的可以看看yahoo的这篇文章：《JavaScript: Use a Web Proxy for Cross-Domain XMLHttpRequest Calls》</p>
<h3 id="1-document-domain-iframe的设置"><a href="#1-document-domain-iframe的设置" class="headerlink" title="1.document.domain+iframe的设置"></a>1.document.domain+iframe的设置</h3><p>对于主域相同而子域不同的例子，可以通过设置document.domain的办法来解决。具体的做法是可以在<a href="http://www.a.com/a.html和http://script.a.com/b.html两个文件中分别加上document.domain" target="_blank" rel="external">http://www.a.com/a.html和http://script.a.com/b.html两个文件中分别加上document.domain</a> = ‘a.com’；然后通过a.html文件中创建一个iframe，去控制iframe的contentDocument，这样两个js文件之间就可以“交互”了。当然这种办法只能解决主域相同而二级域名不同的情况，如果你异想天开的把script.a.com的domian设为alibaba.com那显然是会报错地！代码如下：</p>
<p>www.a.com上的a.html<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span>;</div><div class="line"><span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">ifr.src = <span class="string">'http://script.a.com/b.html'</span>;</div><div class="line">ifr.style.display = <span class="string">'none'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(ifr);</div><div class="line">ifr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> doc = ifr.contentDocument || ifr.contentWindow.document;</div><div class="line">    <span class="comment">// 在这里操纵b.html</span></div><div class="line">    alert(doc.getElementsByTagName(<span class="string">"h1"</span>)[<span class="number">0</span>].childNodes[<span class="number">0</span>].nodeValue);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>script.a.com上的b.html<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span>;</div></pre></td></tr></table></figure></p>
<p>这种方式适用于{www.kuqin.com, kuqin.com, script.kuqin.com, css.kuqin.com}中的任何页面相互通信。</p>
<p>备注：某一页面的domain默认等于window.location.hostname。主域名是不带www的域名，例如a.com，主域名前面带前缀的通常都为二级域名或多级域名，例如www.a.com其实是二级域名。 domain只能设置为主域名，不可以在b.a.com中将domain设置为c.a.com。</p>
<blockquote>
<p>问题：<br>1、安全性，当一个站点（b.a.com）被攻击后，另一个站点（c.a.com）会引起安全漏洞。<br>2、如果一个页面中引入多个iframe，要想能够操作所有iframe，必须都得设置相同domain。</p>
</blockquote>
<h3 id="2、动态创建script"><a href="#2、动态创建script" class="headerlink" title="2、动态创建script"></a>2、动态创建script</h3><p>虽然浏览器默认禁止了跨域访问，但并不禁止在页面中引用其他域的JS文件，并可以自由执行引入的JS文件中的function（包括操作cookie、Dom等等）。根据这一点，可以方便地通过创建script节点的方法来实现完全跨域的通信。具体的做法可以参考YUI的Get Utility</p>
<p>这里判断script节点加载完毕还是蛮有意思的：ie只能通过script的readystatechange属性，其它浏览器是script的load事件。以下是部分判断script加载完毕的方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">js.onload = js.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.readyState || <span class="keyword">this</span>.readyState === <span class="string">'loaded'</span> || <span class="keyword">this</span>.readyState === <span class="string">'complete'</span>) &#123;</div><div class="line">        <span class="comment">// callback在此处执行</span></div><div class="line">        js.onload = js.onreadystatechange = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="3、利用iframe和location-hash"><a href="#3、利用iframe和location-hash" class="headerlink" title="3、利用iframe和location.hash"></a>3、利用iframe和location.hash</h3><p>这个办法比较绕，但是可以解决完全跨域情况下的脚步置换问题。原理是利用location.hash来进行传值。在url： <a href="http://a.com#helloword" target="_blank" rel="external">http://a.com#helloword</a> 中的 ‘#helloworld’就是location.hash，改变hash并不会导致页面刷新，所以可以利用hash值来进行数据传递，当然数据容量是有限的。假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息，cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面，这时的hash值可以做参数传递用。cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据（由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe；Firefox可以修改）。同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一点有变化则获取获取hash值。代码如下：</p>
<p>先是a.com下的文件cs1.html文件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">startRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">    ifr.style.display = <span class="string">'none'</span>;</div><div class="line">    ifr.src = <span class="string">'http://www.cnblogs.com/lab/cscript/cs2.html#paramdo'</span>;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(ifr);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkHash</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">var</span> data = location.hash ? location.hash.substring(<span class="number">1</span>) : <span class="string">''</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">console</span>.log) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Now the data is '</span>+data);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span>(e) &#123;&#125;;</div><div class="line">&#125;</div><div class="line">setInterval(checkHash, <span class="number">2000</span>);</div></pre></td></tr></table></figure></p>
<p>cnblogs.com域名下的cs2.html:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//模拟一个简单的参数处理操作</span></div><div class="line"><span class="keyword">switch</span>(location.hash)&#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'#paramdo'</span>:</div><div class="line">        callBack();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'#paramset'</span>:</div><div class="line">        <span class="comment">//do something……</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callBack</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        parent.location.hash = <span class="string">'somedata'</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        <span class="comment">// ie、chrome的安全机制无法修改parent.location.hash，</span></div><div class="line">        <span class="comment">// 所以要利用一个中间的cnblogs域下的代理iframe</span></div><div class="line">        <span class="keyword">var</span> ifrproxy = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">        ifrproxy.style.display = <span class="string">'none'</span>;</div><div class="line">        ifrproxy.src = <span class="string">'http://a.com/test/cscript/cs3.html#somedata'</span>;    <span class="comment">// 注意该文件在"a.com"域下</span></div><div class="line">        <span class="built_in">document</span>.body.appendChild(ifrproxy);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>a.com下的域名cs3.html<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值</span></div><div class="line">parent.parent.location.hash = self.location.hash.substring(<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>当然这样做也存在很多缺点，诸如数据直接暴露在了url中，数据容量和类型都有限等……</p>
<h3 id="4、window-name实现的跨域数据传输"><a href="#4、window-name实现的跨域数据传输" class="headerlink" title="4、window.name实现的跨域数据传输"></a>4、window.name实现的跨域数据传输</h3><p>文章较长列在此处不便于阅读，<a href="http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html" target="_blank" rel="external">详细请看 window.name实现的跨域数据传输。</a></p>
<h3 id="5、使用HTML5-postMessage"><a href="#5、使用HTML5-postMessage" class="headerlink" title="5、使用HTML5 postMessage"></a>5、使用HTML5 postMessage</h3><p>HTML5中最酷的新功能之一就是 跨文档消息传输Cross Document Messaging。下一代浏览器都将支持这个功能：Chrome 2.0+、Internet Explorer 8.0+, Firefox 3.0+, Opera 9.6+, 和 Safari 4.0+ 。 Facebook已经使用了这个功能，用postMessage支持基于web的实时消息传递。</p>
<p><strong>otherWindow.postMessage(message, targetOrigin);</strong></p>
<p>otherWindow: 对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；window.open的返回值；通过name或下标从window.frames取到的值。<br>message: 所要发送的数据，string类型。<br>targetOrigin: 用于限制otherWindow，’* ‘表示不作限制</p>
<p>a.com/index.html中的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;iframe id=<span class="string">"ifr"</span> src=<span class="string">"b.com/index.html"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ifr = <span class="built_in">document</span>.getElementById(<span class="string">'ifr'</span>);</div><div class="line">    <span class="keyword">var</span> targetOrigin = <span class="string">'http://b.com'</span>;  <span class="comment">// 若写成'http://b.com/c/proxy.html'效果一样</span></div><div class="line">                                        <span class="comment">// 若写成'http://c.com'就不会执行postMessage了</span></div><div class="line">    ifr.contentWindow.postMessage(<span class="string">'I was there!'</span>, targetOrigin);</div><div class="line">&#125;;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>b.com/index.html中的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="comment">// 通过origin属性判断消息来源地址</span></div><div class="line">        <span class="keyword">if</span> (event.origin == <span class="string">'http://a.com'</span>) &#123;</div><div class="line">            alert(event.data);    <span class="comment">// 弹出"I was there!"</span></div><div class="line">            alert(event.source);  <span class="comment">// 对a.com、index.html中window对象的引用</span></div><div class="line">                                  <span class="comment">// 但由于同源策略，这里event.source不可以访问window对象</span></div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>参考文章：《精通HTML5编程》第五章——跨文档消息机制、<a href="https://developer.mozilla.org/en/dom/window.postmessage" target="_blank" rel="external">https://developer.mozilla.org/en/dom/window.postmessage</a></p>
<h3 id="6、利用flash"><a href="#6、利用flash" class="headerlink" title="6、利用flash"></a>6、利用flash</h3><p>这是从YUI3的IO组件中看到的办法，具体可见<a href="http://developer.yahoo.com/yui/3/io/。" target="_blank" rel="external">http://developer.yahoo.com/yui/3/io/。</a><br>可以看在Adobe Developer Connection看到更多的跨域代理文件规范：ross-Domain Policy File Specifications、HTTP Headers Blacklist。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[小球运动]]></title>
      <url>http://diyxiaoshitou.github.io/2016/11/15/%E5%B0%8F%E7%90%83%E8%BF%90%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h2 id="用原生的方法实现小球的运动"><a href="#用原生的方法实现小球的运动" class="headerlink" title="用原生的方法实现小球的运动"></a>用原生的方法实现小球的运动</h2><p><img src="http://ogn56czkt.bkt.clouddn.com/2016-11-15%2000_38_33.gif" alt="小球运动"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">    .ball &#123;</div><div class="line">        width: 40px;</div><div class="line">        height: 40px;</div><div class="line">        border-radius: 20px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .ball1 &#123;</div><div class="line">        background: red;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .ball2 &#123;</div><div class="line">        background: yellow;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .ball3 &#123;</div><div class="line">        background: green;</div><div class="line">    &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball ball1"</span> <span class="attr">style</span>=<span class="string">"margin-left:0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball ball2"</span> <span class="attr">style</span>=<span class="string">"margin-left:0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball ball3"</span> <span class="attr">style</span>=<span class="string">"margin-left:0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> ball1 = <span class="built_in">document</span>.querySelector(<span class="string">".ball1"</span>)</div><div class="line">    <span class="keyword">var</span> ball2 = <span class="built_in">document</span>.querySelector(<span class="string">".ball2"</span>)</div><div class="line">    <span class="keyword">var</span> ball3 = <span class="built_in">document</span>.querySelector(<span class="string">".ball3"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">ball, distance, cb</span>) </span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> marginLeft = <span class="built_in">parseInt</span>(ball.style.marginLeft, <span class="number">10</span>)</div><div class="line">            <span class="keyword">if</span> (marginLeft === distance) &#123;</div><div class="line">                cb &amp;&amp; cb()</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (marginLeft &lt; distance) &#123;</div><div class="line">                    marginLeft++;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    marginLeft--;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'1'</span>);</div><div class="line">                ball.style.marginLeft = marginLeft +<span class="string">'px'</span>;</div><div class="line">                animate(ball, distance, cb)</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">13</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    animate(ball1, <span class="number">100</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        animate(ball2, <span class="number">200</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            animate(ball3, <span class="number">300</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                animate(ball3, <span class="number">150</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    animate(ball2, <span class="number">150</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                        animate(ball1, <span class="number">150</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">                        &#125;)</div><div class="line">                    &#125;)</div><div class="line">                &#125;)</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="通过promise改进后的"><a href="#通过promise改进后的" class="headerlink" title="通过promise改进后的"></a>通过promise改进后的</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/bluebird/js/browser/bluebird.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">    .ball &#123;</div><div class="line">        width: 40px;</div><div class="line">        height: 40px;</div><div class="line">        border-radius: 20px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .ball1 &#123;</div><div class="line">        background: red;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .ball2 &#123;</div><div class="line">        background: yellow;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .ball3 &#123;</div><div class="line">        background: green;</div><div class="line">    &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball ball1"</span> <span class="attr">style</span>=<span class="string">"margin-left:0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball ball2"</span> <span class="attr">style</span>=<span class="string">"margin-left:0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball ball3"</span> <span class="attr">style</span>=<span class="string">"margin-left:0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> ball1 = <span class="built_in">document</span>.querySelector(<span class="string">".ball1"</span>)</div><div class="line">    <span class="keyword">var</span> ball2 = <span class="built_in">document</span>.querySelector(<span class="string">".ball2"</span>)</div><div class="line">    <span class="keyword">var</span> ball3 = <span class="built_in">document</span>.querySelector(<span class="string">".ball3"</span>)</div><div class="line">    <span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">window</span>.Promise;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">promiseAnimate</span>(<span class="params">ball, distance</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">_animate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> marginLeft = <span class="built_in">parseInt</span>(ball.style.marginLeft, <span class="number">10</span>)</div><div class="line">                    <span class="keyword">if</span> (marginLeft === distance) &#123;</div><div class="line">                        resolve()</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">if</span> (marginLeft &lt; distance) &#123;</div><div class="line">                            marginLeft++;</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            marginLeft--;</div><div class="line">                        &#125;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">'1'</span>);</div><div class="line">                        ball.style.marginLeft = marginLeft + <span class="string">'px'</span>;</div><div class="line">                        _animate()</div><div class="line">                    &#125;</div><div class="line">                &#125;, <span class="number">13</span>)</div><div class="line">            &#125;</div><div class="line">            _animate();</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    promiseAnimate(ball1,<span class="number">100</span>)</div><div class="line">    	.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    		 <span class="keyword">return</span> promiseAnimate(ball2,<span class="number">200</span>)</div><div class="line">    	&#125;)</div><div class="line">    	.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    		 <span class="keyword">return</span> promiseAnimate(ball3,<span class="number">300</span>)</div><div class="line">    	&#125;)</div><div class="line">    	.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    		 <span class="keyword">return</span> promiseAnimate(ball3,<span class="number">150</span>)</div><div class="line">    	&#125;)</div><div class="line">    	.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    		 <span class="keyword">return</span> promiseAnimate(ball2,<span class="number">150</span>)</div><div class="line">    	&#125;)</div><div class="line">    	.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    		 <span class="keyword">return</span> promiseAnimate(ball1,<span class="number">150</span>)</div><div class="line">    	&#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我们需要什么的前端环境]]></title>
      <url>http://diyxiaoshitou.github.io/2016/11/12/%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E4%BB%80%E4%B9%88%E7%9A%84%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h3 id="1-代码编辑工具"><a href="#1-代码编辑工具" class="headerlink" title="1.代码编辑工具"></a>1.代码编辑工具</h3><p><a href="https://www.sublimetext.com/" target="_blank" rel="external">sublime</a>, <a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">IntelliJ IDEA</a></p>
<h4 id="2-断点调试工具"><a href="#2-断点调试工具" class="headerlink" title="2.断点调试工具"></a>2.断点调试工具</h4><p>chrome断电调试工具插件 <a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=zh-CN" target="_blank" rel="external">Batarang</a></p>
<h4 id="3-版本管理工具"><a href="#3-版本管理工具" class="headerlink" title="3.版本管理工具"></a>3.版本管理工具</h4><p><a href="https://git-scm.com/" target="_blank" rel="external">git</a></p>
<h4 id="4-代码合并和混淆工具"><a href="#4-代码合并和混淆工具" class="headerlink" title="4.代码合并和混淆工具"></a>4.代码合并和混淆工具</h4><p><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp</a>, <a href="http://www.gruntjs.net/" target="_blank" rel="external">grunt</a></p>
<h4 id="5-依赖管理工具"><a href="#5-依赖管理工具" class="headerlink" title="5.依赖管理工具"></a>5.依赖管理工具</h4><p><a href="https://bower.io/" target="_blank" rel="external">bower</a> 的优势：1.自动安装依赖的组件 2.组件间的依赖检测 3.版本兼容性自动检测</p>
<h4 id="6-单元测试工具-karma-jasmine"><a href="#6-单元测试工具-karma-jasmine" class="headerlink" title="6.单元测试工具 (karma ,jasmine)"></a>6.单元测试工具 (karma ,jasmine)</h4><p>轻量级Server:<a href="https://github.com/diyxiaoshitou/http-server" target="_blank" rel="external">http-server</a> 可以模拟测试数据<br>单元测试神器<a href="http://karma-runner.github.io/1.0/index.html" target="_blank" rel="external">karma</a><br>单元测试 <a href="https://jasmine.github.io/" target="_blank" rel="external">jasmine</a></p>
<h4 id="7-集成测试工具-（模拟键盘和鼠标操作）"><a href="#7-集成测试工具-（模拟键盘和鼠标操作）" class="headerlink" title="7.集成测试工具 （模拟键盘和鼠标操作）"></a>7.集成测试工具 （模拟键盘和鼠标操作）</h4><p>专门为angular定制的测试工具 <a href="https://github.com/angular/protractor" target="_blank" rel="external">Protractor</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从一行代码里面学点JavaScript]]></title>
      <url>http://diyxiaoshitou.github.io/2016/11/02/%E4%BB%8E%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%87%8C%E9%9D%A2%E5%AD%A6%E7%82%B9JavaScript/</url>
      <content type="html"><![CDATA[<p>现如今，JavaScript无处不在，因此关于JavaScript的新知识也是层出不穷。JavaScript的特点在于，要学习它的语法入门简简单，但是要精通使用它的方式却是一件不容易的事。</p>
<p>来看看下面的这段代码，它来自于谷歌“名猿”Addy Osmani在几天前贴出的一段代码，它的作用是用来调试你的CSS层。全部代码只有三行，但是你绝对可以把它放在一行里面完成：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[].forEach.call($$(<span class="string">"*"</span>),<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">  a.style.outline=<span class="string">"1px solid #"</span>+(~~(<span class="built_in">Math</span>.random()*(<span class="number">1</span>&lt;&lt;<span class="number">24</span>))).toString(<span class="number">16</span>)&#125;)</div></pre></td></tr></table></figure>
<p>现在，在你的Chrome浏览器的控制台中输入这段代码，你会发现不同HTML层都被使用不同的颜色添加了一个高亮的边框。是不是非常酷？但是，简单来说，这段代码只是首先获取了所有的页面元素，然后使用一个不同的颜色为它们添加了一个1ps的边框。想法很简单，但是真要实现起来却不是那么容易的一件事。在下面的内容中，我们将一起一步一步学习如何理解上面的这段代码。</p>
<h2 id="选择页面中所有的元素"><a href="#选择页面中所有的元素" class="headerlink" title="选择页面中所有的元素"></a>选择页面中所有的元素</h2><p>我们需要做的第一件事情是获取页面中所有的元素，在上面的代码中，Addy使用了一个Chrome浏览器中特有的函数$$。你可以在你的Chrome浏览器控制台中输入$$(‘a’)，然后你就能得到一个当前页面中所有锚元素的列表。</p>
<p>$$函数是许多现代浏览器命令行API中的一个部分，它等价于document.querySelectorAll,你可以将一个CSS选择器作为这个函数的参数，然后你就能够获得当前页面中所有匹配这个CSS选择器的元素列表。如果你在浏览器控制台以外的地方，你可以使用document.querySelectorAll(‘<em>‘)来代替$$(‘</em>‘)。更多关于$$函数的详细内容可以查看Chrome开发者工具的文档。</p>
<p>当然，除了使用$$函数之外，我们还有一种更简单的方法，document.all，虽然这并不是一种很规范的使用方法，但是它几乎在每一个浏览器中都能运行成功。</p>
<h2 id="迭代所有的元素"><a href="#迭代所有的元素" class="headerlink" title="迭代所有的元素"></a>迭代所有的元素</h2><p>经过第一步，我们已经获得了页面内所有的元素，现在我们想做的事情是遍历每一个元素，然后为它们添加一个彩色边边框。但是上面的代码究竟是怎么一回事呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[].forEach.call( $$(<span class="string">'*'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"> element </span>) </span>&#123; <span class="comment">/* 在这里修改颜色 */</span> &#125;);</div></pre></td></tr></table></figure></p>
<p>首先，我们通过选择器获得的列表是一个NodeLists对象，它和JavaScript中的数组有点像，你可以使用方括号来获取其中的节点，你也可以检查它其中包含多少个元素，但是它并没有实现数组包含的所有方法，因此我们并不能使用$$(‘*’).forEach()来进行迭代。在JavaScript中，有好几个类似于数组但是并不是数组的对象，除了前面的NodeLists，还有函数的参数集合arguments，在这里我们可以使用call或apply函数将函数的方法运用到这些对象上。例如下面的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">name</span>) </span>&#123;</div><div class="line"> <span class="built_in">console</span>.log( <span class="keyword">this</span> + <span class="string">' '</span> + name );&#125;say.call( <span class="string">'hola'</span>, <span class="string">'Mike'</span> ); <span class="comment">// 打印 'hola Mike'</span></div><div class="line"><span class="comment">// 你也可以将这种方法有用在arguments对象上 function example( arg1, arg2, arg3 ) &#123; return Array.prototype.slice.call(arguments, 1); // Returns [arg2, arg3] &#125;</span></div></pre></td></tr></table></figure></p>
<p>在Addy的代码中，使用了[].forEach.call而不是Array.prototype.forEach.call，二者等价，但是前者可以节省几个字节。</p>
<h2 id="为元素添加颜色"><a href="#为元素添加颜色" class="headerlink" title="为元素添加颜色"></a>为元素添加颜色</h2><p>为了让元素都有一个漂亮的边框，我们在上面的代码中使用了CSS属性outline。outline属性位于CSS盒模型之外，因此它并不影响元素的属性或者元素在布局中的位置，这对于我们来说非常有用。这个属性和修改border属性非常类似，因此下面的代码应该不会很难理解：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a.style.outline=<span class="string">"1px solid #"</span> + color</div></pre></td></tr></table></figure></p>
<p>真正有趣的地方在于定义颜色部分：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~~(<span class="built_in">Math</span>.random()*(<span class="number">1</span>&lt;&lt;<span class="number">24</span>))).toString(<span class="number">16</span>)</div></pre></td></tr></table></figure></p>
<p>天呐，上面的代码是什么意思？在JavaScript中，比特操作符并不是经常被使用，因此这里可能会让很多程序员感到很疑惑。</p>
<p>我们想达到的目的是活的一个十六进制格式的颜色例如白色对应的是FFFFFF，蓝色对应的是0000FF，或者随便一个颜色37f9ac。虽然我们人类喜欢十进制，但是我们的代码常常会需要十六进制的东西。</p>
<p>我们首先要学会如何使用toString函数将一个十进制的数组转换为一个十六进制整数。这个函数可以接受一个参数，如果参数缺省，默认为十进制，但是你完全可以使用别的数组：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="number">30</span>).toString(); <span class="comment">// "30"(30).toString(10); // "30"(30).toString(16); // "1e" 十六进制(30).toString(2); // "11110" 二进制(30).toString(36); // "u" 36是允许的最大参数值</span></div></pre></td></tr></table></figure></p>
<p>除此之外，你可以使用parseInt函数将十六进制数字转换为十进制。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">"30"</span>); <span class="comment">// "30"parseInt("30", 10); // "30"parseInt("1e", 16); // "30"parseInt("11110", 2); // "30"parseInt("u", 36); // "30"</span></div></pre></td></tr></table></figure></p>
<p>因此，我们现在只需要一个位于0和ffffff之间的十六进制数，由于:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">"ffffff"</span>, <span class="number">16</span>) == <span class="number">16777215</span></div></pre></td></tr></table></figure></p>
<p>而这里的16777215实际上是2^24-1。</p>
<p>如果你对二进制数学熟悉的话，你可能会知道1&lt;&lt;24 == 16777216。</p>
<p>再进一步，你每在1后面添加一个0，你就相当于多做了一次2的乘方：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> <span class="comment">// 1 == 2^0100 // 4 == 2^210000 // 16 == 2^41000000000000000000000000 // 16777216 == 2^24</span></div></pre></td></tr></table></figure></p>
<p>因此，在这里我们可以知道Math.random()*(1&lt;&lt;24)表示一个位于0和16777216之间的数。</p>
<p>但是这里并没有结束，因为Math.random返回的是一个浮点数，但是我们只想要整数部分。我们的代码中使用波浪号操作符来完成这件事。波浪操作符在JavaScript中被用来对一个变量进行取反。</p>
<p>但是我们在这里并不关心取反，我们指向获取整数部分。因此我们还可以知道两次取反可以去掉一个浮点数的小数部分，因此~~的作用相当于parseInt：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">12.34</span>, <span class="comment">// ~~a = 12    b = -1231.8754, // ~~b = -1231    c = 3213.000001 // ~~c = 3213;~~a == parseInt(a, 10); // true~~b == parseInt(b, 10); // true~~c == parseInt(c, 10); // true</span></div></pre></td></tr></table></figure></p>
<p>当然，我们还有一种更加简洁的方法，使用OR操作符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~~a == 0|a == parseInt(a, 10)~~b == 0|b == parseInt(b, 10)~~c == 0|c == parseInt(c, 10)</div></pre></td></tr></table></figure></p>
<p>最终，我们获得了一个位于0和16777216之间的随机整数，也就是我们想要的随机颜色。此时我们只需要使用toString(16)将它转化为十六进制数即可。</p>
<p>总结</p>
<p>现在，你已经完全理解了前面的这一行代码中的各个部分。作为一个程序员，我们应该在完成工作之后多问自己几遍为什么，还有没有更好更简洁的方法。当然，最应该做的事情当然是多阅读程序代码，也许你就能从某一行代码中学到很多新东西。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[试题]]></title>
      <url>http://diyxiaoshitou.github.io/2016/11/02/%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="1-写一个通用的事件侦听器函数"><a href="#1-写一个通用的事件侦听器函数" class="headerlink" title="1.写一个通用的事件侦听器函数"></a>1.写一个通用的事件侦听器函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// &lt;!-- 通用的侦听函数 --&gt;</span></div><div class="line">   markyun = &#123;&#125;</div><div class="line">   markyun.Event = &#123;</div><div class="line">       <span class="attr">readyEvent</span>: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (fn == <span class="literal">null</span>) &#123;</div><div class="line">               fn = <span class="built_in">document</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>) &#123;</div><div class="line">               <span class="built_in">window</span>.onload = fn;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   oldonload();</div><div class="line">                   fn()</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       <span class="attr">addEvent</span>: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (element.addEventListener) &#123;</div><div class="line">               element.addEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</div><div class="line">               element.attachEvent(<span class="string">'on'</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   handler.call(element);</div><div class="line">               &#125;);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               element[<span class="string">'on'</span> + type] = handler;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       <span class="comment">// 移除事件</span></div><div class="line">       removeEvent: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (element.removeEventListener) &#123;</div><div class="line">               element.removeEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.datachEvent) &#123;</div><div class="line">               element.datachEvent(<span class="string">'on'</span> + type, handler);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               element[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       <span class="comment">// 阻止事件（主要是时间冒泡，因为ie不支持事件捕获）</span></div><div class="line">       stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (ev.stopPropagation) &#123;</div><div class="line">               ev.stopPropagation();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               ev.cancelBubble = <span class="literal">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       <span class="comment">// 取消事件默认行为</span></div><div class="line">       preventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (event.preventDefault) &#123;</div><div class="line">               event.preventDefault();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               event.returnValue = <span class="literal">false</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       <span class="comment">// 获取事件目标</span></div><div class="line">       getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">       &#125;,</div><div class="line"></div><div class="line">       <span class="comment">// 获取对象的引用，渠道时间的所有信息，确保随时使用event;</span></div><div class="line">       getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">           <span class="keyword">var</span> ev = e || <span class="built_in">window</span>.event;</div><div class="line">           <span class="keyword">if</span> (!ev) &#123;</div><div class="line">               <span class="keyword">var</span> c = <span class="keyword">this</span>.getEvent.caller;</div><div class="line">               <span class="keyword">while</span> (c) &#123;</div><div class="line">                   ev = c.anguments[<span class="number">0</span>];</div><div class="line">                   <span class="keyword">if</span> (ev &amp;&amp; Event == ev.constructor) &#123;</div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   &#125;</div><div class="line">                   c = c.caller;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> ev;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="2-Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？"><a href="#2-Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？" class="headerlink" title="2.Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？"></a>2.Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">hasOwnProperty</div><div class="line"></div><div class="line">javaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。</div><div class="line">使用方法：</div><div class="line">object.hasOwnProperty(proName)</div><div class="line">其中参数object是必选项。一个对象的实例。</div><div class="line">proName是必选项。一个属性名称的字符串值。</div><div class="line"></div><div class="line">如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 <span class="literal">true</span>，反之则返回 <span class="literal">false</span>。</div></pre></td></tr></table></figure>
<h3 id="3-统计一个字符串出现最多的字母"><a href="#3-统计一个字符串出现最多的字母" class="headerlink" title="3.统计一个字符串出现最多的字母"></a>3.统计一个字符串出现最多的字母</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> strs = <span class="string">"adadfdfseffserfefsefseeffffftsdg"</span>; <span class="comment">//命名一个变量放置给出的字符串</span></div><div class="line">    <span class="keyword">var</span> kk = getMaxStrLength(strs);</div><div class="line">    <span class="built_in">console</span>.log(kk);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMaxStrLength</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> maxLength = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> result = <span class="string">''</span>;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (str !== <span class="string">''</span>) &#123;</div><div class="line">            <span class="keyword">var</span> oldStr = str;</div><div class="line">            <span class="keyword">var</span> firstStr = str.substring(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">            str = str.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(firstStr, <span class="string">'g'</span>), <span class="string">''</span>);</div><div class="line">            <span class="keyword">if</span> (oldStr.length - str.length &gt; maxLength) &#123;</div><div class="line">                maxLength = oldStr.length - str.length;</div><div class="line">                result = firstStr + <span class="string">"="</span> + maxLength;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="4-随机生成指定长度的字符串"><a href="#4-随机生成指定长度的字符串" class="headerlink" title="4.随机生成指定长度的字符串"></a>4.随机生成指定长度的字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomString</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> str = <span class="string">'abcdefghijklmnopqrstuvwxyz9876543210'</span>;</div><div class="line">        <span class="keyword">var</span> tmp = <span class="string">''</span>,</div><div class="line">            i = <span class="number">0</span>,</div><div class="line">            l = str.length;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;n; i++) &#123;</div><div class="line">                tmp += str.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*l));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> tmp;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(randomString(<span class="number">8</span>));</div></pre></td></tr></table></figure>
<h3 id="5-sort-方法：简单粗暴"><a href="#5-sort-方法：简单粗暴" class="headerlink" title="5.sort()方法：简单粗暴"></a>5.sort()方法：简单粗暴</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">50</span>, <span class="number">49</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.sort(sortNumber);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNumber</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> a - b;</div><div class="line">&#125;</div><div class="line">test();</div></pre></td></tr></table></figure>
<h3 id="6-笔者常用的数组去重方法："><a href="#6-笔者常用的数组去重方法：" class="headerlink" title="6.笔者常用的数组去重方法："></a>6.笔者常用的数组去重方法：</h3><p>方法一<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> array.indexOf(item) === index;</div><div class="line">    <span class="comment">//或者这样写return array.indexOf(item, index+1) === -1; 如果没有重复项，返回true</span></div><div class="line">    <span class="comment">//用filter方法，返回ietm对应的indexOf索引值与本身index索引值相等的值，也就是去掉重复的值，filter本身不修改数组，只是会自动遍历数组，去掉重复值后，那么arr就剩下不重复的了</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">test();<span class="comment">//输出Array [ 1, 4, 50, 6, 2 ]</span></div></pre></td></tr></table></figure></p>
<p>方法二<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</div><div class="line">&#125;</div><div class="line">unique(arr);</div></pre></td></tr></table></figure></p>
<h3 id="7-AJAX都有哪些优点和缺点？"><a href="#7-AJAX都有哪些优点和缺点？" class="headerlink" title="7.AJAX都有哪些优点和缺点？"></a>7.AJAX都有哪些优点和缺点？</h3><p>1.页面无刷新，用户体验好。<br>2.使用异步与服务器通信，响应更迅速。<br>3、可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，ajax的原则是“按需取数据”，可以最大程度的减少冗余请求，和响应对服务器造成的负担。<br>4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。</p>
<h2 id="ajax的缺点"><a href="#ajax的缺点" class="headerlink" title="ajax的缺点"></a>ajax的缺点</h2><p>1、ajax不支持浏览器back按钮。<br>2、安全问题 AJAX暴露了与服务器交互的细节。<br>3、对搜索引擎的支持比较弱。<br>4、破坏了程序的异常机制。<br>5、不容易调试。</p>
<h3 id="8-用js正则实现一个字符串里指定的小写字母变大写"><a href="#8-用js正则实现一个字符串里指定的小写字母变大写" class="headerlink" title="8.用js正则实现一个字符串里指定的小写字母变大写"></a>8.用js正则实现一个字符串里指定的小写字母变大写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rePlaceReg</span>(<span class="params">reg,str</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> str.replace(reg, <span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> m.toUpperCase();</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result = replaceReg(<span class="regexp">/[x]&#123;3&#125;\.[x]&#123;3&#125;[b]/g</span>, <span class="string">'xxx.xxxbggx'</span>);</div><div class="line">    <span class="built_in">console</span>.log(result);  <span class="comment">//XXX.XXXBggx</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wordpress_logo]]></title>
      <url>http://diyxiaoshitou.github.io/2016/08/12/wordpress-logo/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//添加logo  function.php 设置</div><div class="line">add_theme_support( <span class="string">'custom-header'</span>, array(</div><div class="line">    <span class="string">'default-image'</span>          =&gt; <span class="string">''</span>,</div><div class="line">    <span class="string">'random-default'</span>         =&gt; <span class="literal">false</span>,</div><div class="line">    <span class="string">'width'</span>                  =&gt; 133,</div><div class="line">    <span class="string">'height'</span>                 =&gt; 33,</div><div class="line">    <span class="string">'flex-height'</span>            =&gt; <span class="literal">true</span>,</div><div class="line">    <span class="string">'flex-width'</span>             =&gt; <span class="literal">true</span>,</div><div class="line">    <span class="string">'default-text-color'</span>     =&gt; <span class="string">''</span>,</div><div class="line">    <span class="string">'header-text'</span>            =&gt; <span class="literal">true</span>,</div><div class="line">    <span class="string">'uploads'</span>                =&gt; <span class="literal">true</span>,</div><div class="line">    <span class="string">'wp-head-callback'</span>       =&gt; <span class="string">''</span>,</div><div class="line">    <span class="string">'admin-head-callback'</span>    =&gt; <span class="string">''</span>,</div><div class="line">    <span class="string">'admin-preview-callback'</span> =&gt; <span class="string">''</span>,</div><div class="line">) );</div></pre></td></tr></table></figure>
<p>logo调用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- logo --&gt;</div><div class="line">  &lt;?php <span class="keyword">if</span> (get_header_image()) : ?&gt;</div><div class="line">      &lt;a href=<span class="string">"&lt;?php echo get_option('home') ?&gt;"</span>&gt;</div><div class="line">          &lt;img src=<span class="string">"&lt;?php header_image(); ?&gt;"</span> height=<span class="string">"&lt;?php echo get_custom_header()-&gt;height; ?&gt;"</span></div><div class="line">               width=<span class="string">"&lt;?php echo get_custom_header()-&gt;width; ?&gt;"</span> alt=<span class="string">"&lt;?php bloginfo('name');?&gt;"</span>&gt;</div><div class="line">      &lt;/a&gt;</div><div class="line">  &lt;?php endif; ?&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wordpress 缩略图功能函数 the_post_thumbnail]]></title>
      <url>http://diyxiaoshitou.github.io/2016/08/09/%E7%BC%A9%E7%95%A5%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>很多 WordPress 主题，特别是那些杂志型的主题，会给每篇日志加上一张缩略图，这种展现方式一般用在首页，可能单独出现，或者和日志摘要一起。但是目前位置没有一个标准的方法去实现日志缩略图，很多主题是使用 WordPress 自定义字段来实现日志缩略图功能，这样的设置比较复杂，虽然我在制作的很多 WordPress 项目中都是用这个方法，并且设置了直接上传缩略图的方法，但是还是略显麻烦。</p>
<p>从 WordPress 2.9 开始，WordPress 开始内置了日志缩略图的功能，并且提供了详细的接口让主题的作者设置和调用日志的缩略图。</p>
<p>第一步：让主题支持缩略图功能<br>首先确保你的wordpress版本在2.9之上，然后在你的当前主题文件夹中找到并编辑functions.php文件，加入下面这句代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span> ( function_exists( <span class="string">'add_theme_support'</span> ) )  </div><div class="line">    add_theme_support( <span class="string">'post-thumbnails'</span> );</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>(注：主题文件夹都保存在wp-content/themes/目录下)</p>
<p>第二步：使用缩略图<br>在需要显示缩略图的地方调用the_post_thumbnail函数，比如你想在首页为每篇文章显示缩略图，可以在index.php文件中加入下面这样的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?</div><div class="line"> php if ( function_exists( &apos;the_post_thumbnail&apos; ) )  </div><div class="line">          the_post_thumbnail( &apos;thumbnail&apos; );</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>这样就能显示缩略图了，其中参数”thumbnail”表示缩略图显示的大小。wordpress预置了4种大小，你可以使用下面的4个参数来替换’thumbnail’，当然不同的台数显示的图片大小也不同</p>
<p>Ø Thumbnail (缩略图尺寸)</p>
<p>Ø Medium （中等尺寸）</p>
<p>Ø Large （大尺寸）</p>
<p>Ø Full （原始尺寸）</p>
<p>具体尺寸大小可以在后台“设置”中的“媒体”选项中进行设置</p>
<p>你可以设置3种不同的大小，以方便在不同的情况下使用。</p>
<p>至此你的主题已经支持缩略图功能并可以灵活使用了。</p>
<p>下面我将介绍一下更高级的应用技巧。</p>
<p>自定义缩略图尺寸的三种方法<br>方法一：后台设置<br>就是上面提到的方法，不过这种方法只设置3种大小。</p>
<p>方法二：自定义<br>在调用the_post_thumbnail函数的时候，可以直接指定缩略图的大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">the_post_thumbnail(array(200,200)); // 显示200X200尺寸的缩略图</div></pre></td></tr></table></figure></p>
<p>这种方法的优点的灵活，可以随时通过代码的调用显示不同尺寸的图片，缺点是修改有点麻烦，如果你有多处这样的代码，修改起来就要把每一处代码都要修改掉。</p>
<p>方法三：增加预置尺寸<br>通过前面的介绍我们已经知道，wordpress为我们预置了三种可以设置的尺寸。可不可以再增加一些预置的尺寸呢？当然可以，我们要用到的函数是add_image_size。比如我们想在首页和分类页面使用不同的缩略图大小，就可以先预置homepage-thumb和category-thumb这两大小。方法是在functions.php文件中加入以下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if ( function_exists( &apos;add_image_size&apos; ) )&#123;  </div><div class="line">    add_image_size( &apos;category-thumb&apos;, 200, 200 ); // 预置一个名为’category-thumb’,200*200的缩略图大小  </div><div class="line">    add_image_size( &apos;homepage-thumb&apos;, 220, 180); //预置一个名为’homepage-thumb’,220*180的缩略图大小  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后就可以在首页调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">the_post_thumbnail(‘homepage-thumb’);</div></pre></td></tr></table></figure></p>
<p>显示220*180的缩略图</p>
<p>在分类页面调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">the_post_thumbnail(‘category-thumb’);</div></pre></td></tr></table></figure></p>
<p>则显示200*200的缩略图。</p>
<p>定义缩略图的样式<br>首先我们先来看一下the_post_thumbnail函数输出的html是什么样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;http://domety.com/wp-content/uploads/2010/10/screenshot-150x150.png&quot;</div><div class="line">class=&quot;attachment-thumbnail wp-post-image&quot; alt=&quot;&quot; title=&quot;screenshot&quot; /&gt;</div></pre></td></tr></table></figure>
<p>由此可以看出，我们可以用css定义类attachment-thumbnail的样式就可以了。</p>
<p>但是如果我想分别为首页和分类页面定义不同的样式，该怎么做呢？</p>
<p>方法一是增加一个div，针对不同的div定义不同的样式，在此不多做介绍。</p>
<p>我要介绍的是另一种方法：给缩略图添加属性</p>
<p>你可以测试一下，如果把the_post_thumbnail(“thumbnail”)修改为下面这样的代码，看看输出的html结果是什么？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">the_post_thumbnail(‘thumbnail’,array(‘class’ =&gt; ‘homepage-thumb’));</div></pre></td></tr></table></figure>
<p>我这边输出的html为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;http://domety.com/wp-content/uploads/2010/10/screenshot-150x150.png&quot;</div><div class="line">class=&quot;homepage-thumb wp-post-image&quot; alt=&quot;&quot; title=&quot;screenshot&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>可以和之前的html对比一下，不难发现class属性变成了我们设置的’homepage-thumb’。可以通过这种方法，把首页缩略图和分类页面的缩略图设置为不同的class属性。</p>
<p>改变THE_POST_THUMBNAIL的HTML输出<br>我们可以使用filter来改变缩略图的html输出结果，下面的这段代码为缩略图加了一个文章链接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">add_filter( &apos;post_thumbnail_html&apos;, &apos;my_post_image_html&apos;, 10, 3 );  </div><div class="line">function my_post_image_html( $html, $post_id, $post_image_id ) &#123;  </div><div class="line">    $html = &apos;&lt;a href=&quot;&apos; . get_permalink( $post_id ) . &apos;&quot; title=&quot;&apos; . esc_attr( get_post_field( &apos;post_title&apos;, $post_id ) ) . &apos;&quot;&gt;&apos; . $html . &apos;&lt;/a&gt;&apos;;  </div><div class="line">    return $html;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当你点击缩略图的时候就会跳转到相应的文章内页。</p>
<p>检测文章是否有缩略图<br>一个良好的习惯就是在调用the_post_thumbnail函数之前，先检测一下该文章有没有设置缩略图，检测的方法是调用has_post_thumbnail函数，代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;?php if ( has_post_thumbnail() )  </div><div class="line">    the_post_thumbnail( &apos;thumbnail&apos; );?&gt;</div></pre></td></tr></table></figure></p>
<p>结合本站之前的提取文章内图片做为缩略图的方法，现在可以合二为一：首先判断文章有没有设置缩略图，如果有就直接显示，如果没有再提取文章内的图片为缩略图。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">/*  </div><div class="line"></div><div class="line">* 缩略图</div><div class="line"></div><div class="line">*/</div><div class="line"></div><div class="line">function dm_the_thumbnail() &#123;  </div><div class="line"></div><div class="line">    global $post;  </div><div class="line"></div><div class="line">    // 判断该文章是否设置的缩略图，如果有则直接显示  </div><div class="line"></div><div class="line">    if ( has_post_thumbnail() ) &#123;  </div><div class="line"></div><div class="line">        echo &apos;&lt;a href=&quot;&apos;.get_permalink().&apos;&quot; title=&quot;阅读全文&quot;&gt;&apos;;  </div><div class="line"></div><div class="line">        the_post_thumbnail(&apos;thumbnail&apos;);  </div><div class="line"></div><div class="line">        echo &apos;&lt;/a&gt;&apos;;  </div><div class="line"></div><div class="line">    &#125; else &#123; //如果文章没有设置缩略图，则查找文章内是否包含图片  </div><div class="line"></div><div class="line">        $content = $post-&gt;post_content;  </div><div class="line"></div><div class="line">        preg_match_all(&apos;/&lt;img.*?(?: |\\t|\\r|\\n)?src=[\&apos;&quot;]?(.+?)[\&apos;&quot;]?(?:(?: |\\t|\\r|\\n)+.*?)?&gt;/sim&apos;, $content, $strResult, PREG_PATTERN_ORDER);  </div><div class="line"></div><div class="line">        $n = count($strResult[1]);  </div><div class="line"></div><div class="line">        if($n &gt; 0)&#123; // 如果文章内包含有图片，就用第一张图片做为缩略图  </div><div class="line"></div><div class="line">            echo &apos;&lt;a href=&quot;&apos;.get_permalink().&apos;&quot; title=&quot;阅读全文&quot;&gt;&lt;img src=&quot;&apos;.$strResult[1][0].&apos;&quot; alt=&quot;缩略图&quot; /&gt;&lt;/a&gt;&apos;;  </div><div class="line"></div><div class="line">        &#125;else &#123; // 如果文章内没有图片，则用默认的图片。  </div><div class="line"></div><div class="line">            echo &apos;&lt;a href=&quot;&apos;.get_permalink().&apos;&quot; title=&quot;阅读全文&quot;&gt;&lt;img src=&quot;&apos;.get_bloginfo(&apos;template_url&apos;).&apos;/imgs/default_thumbnail.jpg&quot; alt=&quot;缩略图&quot; /&gt;&lt;/a&gt;&apos;;  </div><div class="line"></div><div class="line">        &#125;  </div><div class="line"></div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有兴趣的朋友可以把以上代码复制到functions.php文件中，然后调用dm_the_thumbnail()即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[获取wordpress内容]]></title>
      <url>http://diyxiaoshitou.github.io/2016/08/08/%E8%8E%B7%E5%8F%96wordpress%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply_filters(&apos;the_content&apos;, $post-&gt;post_content)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac sublime3快捷键]]></title>
      <url>http://diyxiaoshitou.github.io/2016/08/04/sublime%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">⌘ + <span class="built_in">shift</span> + k  //编辑成对的元素标签</div><div class="line">control + <span class="built_in">shift</span> + k  //删除行</div><div class="line">⌘ + <span class="built_in">shift</span> + d  //复制行</div><div class="line"><span class="built_in">shift</span> + alt  //选择单词</div><div class="line">⌘+k ⌘+l  //转换成小写</div><div class="line">⌘+k ⌘+u  //转换成大写</div></pre></td></tr></table></figure>
<p>打开/前往<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">⌘T	前往文件</div><div class="line">⌘⌃P	前往项目</div><div class="line">⌘R	前往 method</div><div class="line">⌘⇧P	命令提示</div><div class="line">⌃G	前往行</div><div class="line">⌘KB	开关侧栏</div><div class="line"> ⌃ `	python 控制台</div><div class="line">⌘⇧N	新建窗口</div></pre></td></tr></table></figure></p>
<p>编辑<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">⌘L	选择行 (重复按下将下一行加入选择)</div><div class="line">⌘D	选择词 (重复按下时多重选择相同的词进行多重编辑)</div><div class="line">⌃⇧M	选择括号内的内容</div><div class="line">⌘⇧↩	在当前行前插入新行</div><div class="line">⌘↩	在当前行后插入新行</div><div class="line">⌃⇧K	删除行</div><div class="line">⌘KK	从光标处删除至行尾</div><div class="line">⌘K⌫	从光标处删除至行首</div><div class="line">⌘⇧D	复制(多)行</div><div class="line">⌘J	合并(多)行</div><div class="line">⌘KU	改为大写</div><div class="line">⌘KL	改为小写</div><div class="line">⌘ /	注释</div><div class="line">⌘⌥ /	块注释</div><div class="line">⌘Y	恢复或重复</div><div class="line">⌘⇧V	粘贴并自动缩进</div><div class="line">⌃ space	自动完成(重复按下选择下一个提示)</div><div class="line">⌃M	跳转至对应的括号</div><div class="line">⌘U	软撤销（可撤销光标移动）</div><div class="line">⌘⇧U	软重做（可重做光标移动）</div><div class="line">XML /HTML</div><div class="line"></div><div class="line">⌘⇧A	选择标签内的内容</div><div class="line">⌘⌥ .	闭合当前标签</div></pre></td></tr></table></figure></p>
<p>查找/替换<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">⌘F	查找</div><div class="line">⌘⌥F	替换</div><div class="line">⌘⌥G	查找下一个符合当前所选的内容</div><div class="line">⌘⌃G	查找所有符合当前所选的内容进行多重编辑</div><div class="line">⌘⇧F	在所有打开的文件中进行查找</div><div class="line">拆分窗口/标签页</div><div class="line"></div><div class="line">⌘⌥1	单列</div><div class="line">⌘⌥2	双列</div><div class="line">⌘⌥5	网格 (4组)</div><div class="line">⌃[1,2,3,4]	焦点移动至相应组</div><div class="line">⌃⇧[1,2,3,4]	将当前文件移动至相应组</div><div class="line">⌘[1,2,3…]	选择相应标签页</div></pre></td></tr></table></figure></p>
<p>书签<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">⌘F2	添加/去除书签</div><div class="line">F2	下一个书签</div><div class="line">⇧F2	前一个书签</div><div class="line">⌘⇧F2	清除书签</div></pre></td></tr></table></figure></p>
<p>标记<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">⌘K space	设置标记</div><div class="line">⌘KW	从光标位置删除至标记</div><div class="line">⌘KA	从光标位置选择至标记</div><div class="line">⌘KG	清除标记</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wordpress菜单]]></title>
      <url>http://diyxiaoshitou.github.io/2016/07/27/wordpress%E8%8F%9C%E5%8D%95/</url>
      <content type="html"><![CDATA[<hr>
<p>1.添加菜单 <strong>function.php</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//添加菜单</div><div class="line"><span class="keyword">if</span> (function_exists(<span class="string">'register_nav_menus'</span>)) &#123;</div><div class="line">    register_nav_menus(</div><div class="line">        array(</div><div class="line">            <span class="string">'header-menu'</span>=&gt;__(<span class="string">'主菜单'</span>), //  设置菜单的位置,设置后会在后台显示出来,后台可以设置主题对应的位置</div><div class="line">            <span class="string">'sub-menu'</span>=&gt;__(<span class="string">'副菜单'</span>),</div><div class="line">            <span class="string">'sider-menu'</span>=&gt;__(<span class="string">'侧边菜单'</span>),</div><div class="line">            <span class="string">'footer-menu'</span>=&gt;__(<span class="string">'底部的菜单'</span>),</div><div class="line"></div><div class="line">        )</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.页面调用 <strong>菜单</strong><br><code>下面的代码不用都写后台可以设置菜单对应的位置</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//</span></div><div class="line">wp_nav_menu(</div><div class="line">    <span class="keyword">array</span>(</div><div class="line">        <span class="string">'theme_location'</span> =&gt;<span class="string">'sub-menu'</span>, <span class="comment">//菜单的位置</span></div><div class="line">        <span class="string">'menu'</span>=&gt;<span class="string">'sub-menu'</span>,  <span class="comment">//菜单的名称</span></div><div class="line">        <span class="string">'container'</span>       =&gt; <span class="string">'nav'</span>, <span class="comment">//最外层容器标签名</span></div><div class="line">        <span class="string">'container_class'</span> =&gt; <span class="string">'primary'</span>, <span class="comment">//最外层容器class名</span></div><div class="line">        <span class="string">'container_id'</span>    =&gt; <span class="string">'feng'</span>,<span class="comment">//最外层容器id值</span></div><div class="line">        <span class="string">'menu_class'</span>      =&gt; <span class="string">'sf-menu'</span>, <span class="comment">//ul标签class</span></div><div class="line">        <span class="string">'menu_id'</span>         =&gt; <span class="string">'topnav'</span>,<span class="comment">//ul标签id</span></div><div class="line">        <span class="string">'echo'</span>            =&gt; <span class="keyword">true</span>,<span class="comment">//是否打印，默认是true，如果想将导航的代码作为赋值使用，可设置为false</span></div><div class="line">        <span class="string">'fallback_cb'</span>     =&gt; <span class="string">'wp_page_menu'</span>,<span class="comment">//备用的导航菜单函数，用于没有在后台设置导航时调用</span></div><div class="line">        <span class="string">'before'</span>          =&gt; <span class="string">'&lt;p&gt;'</span>,<span class="comment">//显示在导航a标签之前</span></div><div class="line">        <span class="string">'after'</span>           =&gt; <span class="string">'&lt;/p&gt;'</span>,<span class="comment">//显示在导航a标签之后</span></div><div class="line">        <span class="string">'link_before'</span>     =&gt; <span class="string">'?'</span>,<span class="comment">//显示在导航链接名之后</span></div><div class="line">        <span class="string">'link_after'</span>      =&gt; <span class="string">'??'</span>,<span class="comment">//显示在导航链接名之前</span></div><div class="line"><span class="comment">//        'items_wrap'      =&gt; '&lt;ul id="%1$s"&gt;%3$s&lt;/ul&gt;', //输出ul的格式,如果打开ul的class将去掉</span></div><div class="line">        <span class="string">'depth'</span>           =&gt; <span class="number">0</span>,<span class="comment">////显示的菜单层数，默认0，0是显示所有层</span></div><div class="line">        <span class="string">'walker'</span>          =&gt; <span class="string">''</span><span class="comment">// //调用一个对象定义显示导航菜单 ));例如菜单的描述</span></div><div class="line"></div><div class="line">    )</div><div class="line">)</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wordpress体验]]></title>
      <url>http://diyxiaoshitou.github.io/2016/07/26/wordpress%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<hr>
<h2 id="阅读设置"><a href="#阅读设置" class="headerlink" title="阅读设置"></a>阅读设置</h2><p><strong>首页显示</strong><br>您的最新文章（index.php）相当于文章列表页<br><strong>一个静态页面（在下方选择）</strong> (如果选择这个)<br><code>主页：</code> page.php(默认)  如果有<code>front-page.php</code>会优先调用显示<br><code>文章页：</code> 相当于文章列表页</p>
<blockquote>
<p>front-page  首页<br>    index.php   //（默认首页）新闻列表<br>    page  //单页面<br>    single.php // 文章页<br>    sidebar.php //侧边栏</p>
</blockquote>
<h2 id="页面规划"><a href="#页面规划" class="headerlink" title="页面规划"></a>页面规划</h2><p>所有的标题的<code>导航|子导航</code>，应该用 <strong>分类，和单页面</strong><br>里边的内容，应该用 <strong>新闻列表，帖子列表</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">bloginfo(<span class="string">'template_url'</span>)  //模板根目录</div><div class="line">home_url() //获取根路径 需要输出</div><div class="line">get_option(<span class="string">'home'</span>)  //获取根路径 需要输出</div><div class="line">get_post_meta(get_the_ID(), <span class="string">'jianjie'</span>, <span class="literal">true</span>) //获取自定义字段为“jianjie”的内容 需要输出</div><div class="line">the_permalink()  //获取连接</div><div class="line">the_title()  //获取标题</div><div class="line">the_post_thumbnail(<span class="string">'full'</span>)  //获取缩略图</div><div class="line">the_time(<span class="string">'l, F jS, Y'</span>)  //获取时间</div><div class="line">the_content()  //获取内容</div><div class="line"></div><div class="line"></div><div class="line">wp_list_pages(<span class="string">'title_li=&lt;h4&gt;'</span>.__(<span class="string">'关于我们'</span>).<span class="string">'&lt;/h4&gt;&amp;child_of=149&amp;sort_column=post_date'</span>) //获取页面的列表</div><div class="line">wp_nav_menu(<span class="string">'theme_location=footer-menu-support'</span>) //获取菜单</div></pre></td></tr></table></figure>
<p>查询</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">query_posts(<span class="string">"showposts=5&amp;cat=13"</span>); <span class="comment">//查询</span></div><div class="line"></div><div class="line">$query_scroll = <span class="keyword">new</span> WP_Query(<span class="string">"showposts=5&amp;cat=13"</span>); <span class="comment">//查询建议用这个</span></div><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> ($query_scroll-&gt;have_posts()): <span class="keyword">while</span> ($query_scroll-&gt;have_posts()): $query_scroll-&gt;the_post(); <span class="meta">?&gt;</span></div><div class="line">    <span class="meta">&lt;?php</span> the_post_thumbnail(<span class="string">'full'</span>) <span class="meta">?&gt;</span></div><div class="line"><span class="meta">&lt;?php</span> <span class="keyword">endwhile</span>; <span class="keyword">endif</span>; <span class="meta">?&gt;</span></div><div class="line"></div><div class="line">wp_reset_query();<span class="comment">// 重置查询</span></div><div class="line"></div><div class="line">apply_filters(<span class="string">'the_content'</span>,$post-&gt;post_content)  <span class="comment">//单独获取内容</span></div></pre></td></tr></table></figure>
<p>调用样式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"&lt;?php bloginfo('stylesheet_url')?&gt;"</span>&gt; //调用样式</div></pre></td></tr></table></figure></p>
<p>默认添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wp_enqueue_script(<span class="string">"jquery"</span>)  //必须在下面的前面</div><div class="line">wp_head()</div><div class="line">wp_footer()</div></pre></td></tr></table></figure></p>
<p>调用模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">get_template_part(&apos;single-product&apos;) //调用模板</div><div class="line">comments_template() //调用默认的评论模板</div><div class="line">get_sidebar() //引用侧栏</div></pre></td></tr></table></figure></p>
<p>判断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">in_category(array(18,20,21))  //在分类里</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[单行向上滚动]]></title>
      <url>http://diyxiaoshitou.github.io/2016/07/26/%E5%8D%95%E8%A1%8C%E5%90%91%E4%B8%8A%E6%BB%9A%E5%8A%A8/</url>
      <content type="html"><![CDATA[<hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">	&lt;title&gt;Document&lt;/title&gt;</div><div class="line">	&lt;script src=<span class="string">"http://www.lanrenzhijia.com/ajaxjs/jquery.min.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">		p&#123; height: 80px;  overflow: hidden; width: 200px;&#125;</div><div class="line">		p a&#123; display: block; height: 80px;  &#125;</div><div class="line">	&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;p id=<span class="string">"ty-text-slide"</span> style=<span class="string">"position:relative;"</span>&gt;</div><div class="line">    &lt;a style=<span class="string">"position: relative; margin-top: 0px;"</span> href=<span class="string">"#"</span>&gt;中央部门晒决算 国税系统津贴福利开支占近6成_新闻中心_中国网 &lt;/a&gt;</div><div class="line">    &lt;a style=<span class="string">"position: relative; margin-top: 0px;"</span> href=<span class="string">"#"</span>&gt;房地产税法最快2017年通过 百万房产或每年缴5千 &lt;/a&gt;</div><div class="line">    &lt;a style=<span class="string">"position: relative; margin-top: 0px;"</span> href=<span class="string">"#"</span>&gt;美媒:中国援助阿富汗打击恐怖组织 首批军事装备抵阿 &lt;/a&gt;</div><div class="line">&lt;/p&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">		//          显示滚动文字</div><div class="line">            var scroll_event;</div><div class="line">            var <span class="variable">$scroll_parent</span> = $(<span class="string">"#ty-text-slide"</span>);</div><div class="line">            var scroll_height = <span class="variable">$scroll_parent</span>.find(<span class="string">'a:first'</span>).height();</div><div class="line">            <span class="variable">$scroll_parent</span>.hover(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                clearInterval(scroll_event);</div><div class="line">            &#125;, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                scroll_event = <span class="built_in">set</span>Interval(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                    var _this = <span class="variable">$scroll_parent</span>;</div><div class="line">                    _this.find(<span class="string">'a:first'</span>).animate(&#123;<span class="string">"marginTop"</span>: -scroll_height + <span class="string">'px'</span>&#125;, 500, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        _this.find(<span class="string">"a:first"</span>).css(&#123;marginTop: <span class="string">"0px"</span>&#125;).appendTo(_this);</div><div class="line">                    &#125;)</div><div class="line">                &#125;, 2000);</div><div class="line">            &#125;).trigger(<span class="string">"mouseout"</span>);</div><div class="line">	&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用 Travis CI 自动更新 GitHub Pages]]></title>
      <url>http://diyxiaoshitou.github.io/2016/07/14/markdown/</url>
      <content type="html"><![CDATA[<p>每次更改完 NexT 文档 都要手动部署到 GitHub Pages，重复的次数多了就显得很麻烦，出错的几率也会变大。文档源码放置在 master 分支，最终部署文件在 gh-pages 分支。当在 master 分支更改某些内容之后，通过运行 gulp dist 来生成最终部署的 HTML 文件到 dist 目录，随后再进入 dist 目录初始化 git 仓库、添加文件、提交文件，最后将提交强制推送到远程 gh-pages 分支（因当心我会误将最终部署的 HTML 文件提交到 master 分支导致源码丢失，我在 GitHub 上把 master 分支给锁定了）。除此之外还有另外一个问题：如果 master 分支有 Pull Requests，我需要先将更新取回本地，然后编译更新再提交回远程 gh-pages 分支。</p>
<p>年轻的想法</p>
<p>于是，我就想这说将这个过程自动化。首先考虑了使用 GitHub Webhooks，这是 Github 提供的一种机制，使应用能与 Github 通讯。这种机制实际上就是 Pub/Sub，当 Github 监测到资源（如仓库）有变化就往预先设定的 URL 发送一个 POST 请求（Pub），告知变化情况，而后接收变化的服务器（Sub）即可做一些额外的事情。</p>
<p>这个思路需要有一个服务器并启动一个服务来接收 Github 的请求。这里又有种不同的策略，这两种策略都是基于源码放置在 Github 的前提。第一个是源码将最终文档直接部署在这台服务器上（如使用 Nginx），当接收到 Github 通知直接编译更新到服务器指定的文件夹下即可。另一种策略是当服务器接收到通知后编译更新，而后将编译后的版本提交到 Github 仓库的 gh-pages 分支，让 Github 做 Host。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[nginx.conf]]></title>
      <url>http://diyxiaoshitou.github.io/2016/07/14/nginx-conf/</url>
      <content type="html"><![CDATA[<hr>
<p>这个是nginx的主配置文件，其中 <strong><code>include servers/*.conf;</code></strong>  里包含了servers配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#user  nobody;</span></div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line"><span class="comment">#error_log  logs/error.log;</span></div><div class="line"><span class="comment">#error_log  logs/error.log  notice;</span></div><div class="line"><span class="comment">#error_log  logs/error.log  info;</span></div><div class="line"></div><div class="line"><span class="comment">#pid        logs/nginx.pid;</span></div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">		worker_connections  1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line"></div><div class="line">		include       mime.types;</div><div class="line">		default_type  application/octet-stream;</div><div class="line"></div><div class="line">		log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></div><div class="line">				<span class="string">'$status $body_bytes_sent "$http_referer" '</span></div><div class="line">				<span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</div><div class="line"></div><div class="line"><span class="comment">#access_log  logs/access.log  main;</span></div><div class="line">		sendfile on;</div><div class="line">		tcp_nopush on;</div><div class="line">		tcp_nodelay on;</div><div class="line"></div><div class="line">		client_body_timeout   10;</div><div class="line">		client_header_timeout 10;</div><div class="line"><span class="comment">#keepalive_timeout  0;</span></div><div class="line">		keepalive_timeout  65;</div><div class="line">		send_timeout          10;</div><div class="line"></div><div class="line">		server_tokens off;</div><div class="line">		client_max_body_size 300m;</div><div class="line">		client_body_buffer_size 8K;</div><div class="line">		client_header_buffer_size 1k;</div><div class="line">		large_client_header_buffers 4 4k;</div><div class="line">		server_names_hash_bucket_size 128;</div><div class="line"></div><div class="line"><span class="comment">## gzip</span></div><div class="line">		gzip on;</div><div class="line">		gzip_disable <span class="string">"MSIE [1-6]\."</span>;</div><div class="line">		gzip_vary on;</div><div class="line">		gzip_min_length  1000;</div><div class="line">		gzip_proxied     expired no-cache no-store private auth;</div><div class="line">		gzip_comp_level 6;</div><div class="line">		gzip_buffers 16 8k;</div><div class="line">		gzip_http_version 1.1;</div><div class="line">		gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</div><div class="line"></div><div class="line">		include servers/*.conf;</div><div class="line"><span class="comment">#add_header Access-Control-Allow-Origin *;</span></div><div class="line"><span class="comment">#add_header Access-Control-Allow-Headers X-Requested-With;</span></div><div class="line"><span class="comment">#add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[phone.conf]]></title>
      <url>http://diyxiaoshitou.github.io/2016/07/14/phone-conf/</url>
      <content type="html"><![CDATA[<hr>
<h2 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h2><p>当访问接口 <a href="http://phone.app/v1" target="_blank" rel="external">http://phone.app/v1</a> 时，会自动代理到 <a href="http://10.2.10.92:8080/v1" target="_blank" rel="external">http://10.2.10.92:8080/v1</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-------------------------------------------</span></div><div class="line"><span class="comment">#java 站点 负载模板配置文件，将_DOMAIN_替换成相应的域名,_PORT_ 替换成对应的端口</span></div><div class="line"><span class="comment">#-------------------------------------------</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#upstream mysvr &#123;</span></div><div class="line"><span class="comment">##weigth参数表示权值，权值越高被分配到的几率越大</span></div><div class="line"><span class="comment">##本机上的Squid开启3128端口</span></div><div class="line"><span class="comment">#	server 10.2.10.92:8080 weight=6;</span></div><div class="line"><span class="comment">#&#125;</span></div><div class="line"></div><div class="line">server&#123;</div><div class="line">	listen 80;</div><div class="line">	server_name phone.app;</div><div class="line">	root   /Users/diyxiaoshitou/WebstormProjects/phone;</div><div class="line">	index  index.html index.htm;</div><div class="line">	location /v1 &#123;</div><div class="line">		proxy_pass http://10.2.10.92:8080;</div><div class="line">		proxy_redirect  off;</div><div class="line">		proxy_set_header    Host            <span class="variable">$host</span>;</div><div class="line">		proxy_set_header    X-Real-IP       <span class="variable">$remote_addr</span>;</div><div class="line">		proxy_set_header    X-Forwarded-for <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">		proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</div><div class="line">		proxy_max_temp_file_size 0;</div><div class="line">		proxy_connect_timeout      90;</div><div class="line">		proxy_send_timeout         90;</div><div class="line">		proxy_read_timeout         90;</div><div class="line">		proxy_buffer_size          4k;</div><div class="line">		proxy_buffers              4 32k;</div><div class="line">		proxy_busy_buffers_size    64k;</div><div class="line">		proxy_temp_file_write_size 64k;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[wordpress_conf]]></title>
      <url>http://diyxiaoshitou.github.io/2016/07/14/wordpress-conf/</url>
      <content type="html"><![CDATA[<hr>
<p>这个配置文件主要配置server_name和root</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">server &#123;</div><div class="line">   listen       80;</div><div class="line">   server_name  wordpress.app;</div><div class="line">   root   /Users/diyxiaoshitou/wordpress;</div><div class="line">   index  index.html index.htm index.php;</div><div class="line"></div><div class="line">   <span class="comment">#charset koi8-r;</span></div><div class="line"></div><div class="line"><span class="comment">#   access_log  logs/access.log;</span></div><div class="line"></div><div class="line">   <span class="comment">#error_page  404              /404.html;</span></div><div class="line"></div><div class="line">   <span class="comment"># redirect server error pages to the static page /50x.html</span></div><div class="line">   <span class="comment">#</span></div><div class="line">   error_page   500 502 503 504  /50x.html;</div><div class="line">   location = /50x.html &#123;</div><div class="line">       root   html;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></div><div class="line">   <span class="comment">#</span></div><div class="line">   <span class="comment">#location ~ \.php$ &#123;</span></div><div class="line">   <span class="comment">#    proxy_pass   http://127.0.0.1;</span></div><div class="line">   <span class="comment">#&#125;</span></div><div class="line"></div><div class="line">   location ~ /\. &#123;</div><div class="line">           deny all;</div><div class="line">           access_log off;</div><div class="line">           log_not_found off;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></div><div class="line">   <span class="comment">#</span></div><div class="line"></div><div class="line"></div><div class="line">   location ~ \.php$ &#123;</div><div class="line">       fastcgi_buffers 2 256k;</div><div class="line">       fastcgi_buffer_size 128K;</div><div class="line">       fastcgi_busy_buffers_size 256K;</div><div class="line">       fastcgi_temp_file_write_size 256k;</div><div class="line">       fastcgi_connect_timeout 3000;</div><div class="line">       fastcgi_send_timeout 3000;</div><div class="line">       fastcgi_read_timeout 3000;</div><div class="line">       fastcgi_pass   127.0.0.1:9000;</div><div class="line">       fastcgi_index  index.php;</div><div class="line">       <span class="comment">#fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></div><div class="line">       fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">       include        fastcgi_params;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"></div><div class="line">   <span class="comment"># deny access to .htaccess files, if Apache's document root</span></div><div class="line">   <span class="comment"># concurs with nginx's one</span></div><div class="line">   <span class="comment">#</span></div><div class="line">   location ~ /\.ht &#123;</div><div class="line">       deny  all;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   location ~ /\.git &#123;</div><div class="line">       deny  all;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
